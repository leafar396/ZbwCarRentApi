{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Description Documentation","title":"Home"},{"location":"#home","text":"Description Documentation","title":"Home"},{"location":"description/","text":"Description 1-Einleitung Um eine saubere Architektur in einem Projekt zu erreichen, die einerseits alle Zust\u00e4ndigkeiten kl\u00e4rt und abgrenzt und zudem eine Verteilung auf verschiedene Layers und Tiers erm\u00f6glicht, m\u00fcssen in Visual Studio mehrere Projekte angelegt werden. Wir wollen zudem die M\u00f6glichkeit haben alle internen und externen Abh\u00e4ngigkeiten zentral zu verwalten. 2-Initiale Voraussetzungen VS2019 / .NET Core Nodejs NPM Postman 3-Einf\u00fchrung Es soll ein neues Autovermietungssystem \u201eCarRent\u201c erstellt werden. Das System soll aus Server-Teilen und optional einen Web-Client bestehen. 1. Die Daten sollen mittels \u00abRepository Pattern\u00bb in eine Datenbank gespeichert werden k\u00f6nnen. 2. Die Business Logik soll auf dem Backend laufen und REST APIs anbieten. 3. Es soll zuerst ein Monolith erstellt werden und sp\u00e4ter auf eine Micro Service Architektur \u00fcberf\u00fchrt werden. Optional: 4. Der Web-Client benutzt die REST API um die Funktionen auszuf\u00fchren. Folgende Detailinformationen liegen unstrukturiert \u00fcber das zu entwickelnde System vor: Der Sachbearbeiter kann Kunden mit Namen und Adresse und Kundennummer im System verwalten, d.h. erfassen, bearbeiten, l\u00f6schen und den Kunden mit dessen Namen oder Kundennummer suchen. Der Sachbearbeiter kann zudem die Autos von CarRent verwalten und nach denen suchen. Jedes Auto kann einer bestimmten Klasse zwischen Luxusklasse, Mittelklasse oder Einfachklasse zugeordnet werden und besitzt zudem eine Marke, einen Typ und eine eindeutige Identifikation. Jede Klasse besitzt eine Tagesgeb\u00fchr. Bei einer neuen Reservation kann der Kunde ein Auto aus einer bestimmten Klasse w\u00e4hlen. Er muss zudem die Anzahl der Tage (Start/Enddatum) angeben, die er das Auto gerne mieten m\u00f6chte. Dabei werden die Gesamtkosten berechnet. Wird die Reservation gespeichert, so wird sie mit einer Reservationsnummer ablegt. Bei Abholung des Autos wird die Reservation in einen Mietvertrag umgewandel 3.1 C4 Pattern 4 Arbeitspaket 1 \u2013 Big Picture / Vision Hilfsmittel: Whiteboard, Flipchart, Postit, Word, UML Tool, Markdown, \u2026 4.1.1 Context Was soll gebaut werden? Wer benutzt das System (users, actors, roles, personas, etc ? Wie passt es in die bestehende IT-Landschaft? 4.1.2 Containers Was sind die technologischen Entscheide? Wie kommunizieren die Container untereinander? Als Entwickler m\u00f6chte ich gerne wissen, wo ich Code schreiben muss? 4.1.3 Components Aus welchen Komponenten und Services besteht das System? Ist klar wie das System \u201ehigh-level\u201c arbeiten soll? Haben alle Komponenten ein Zuhause Container? 4.1.4 Classes (Optional) Was sind die wichtigen Konzepte des Systems? Wie stehen die Konzepte zueinander? 4.2 Aufgabe Erstellen Sie mittels C4-Pattern das Big-Picture des Systems. 5 Arbeitspaket 2 \u2013 Domain Model und Use Cases Hilfsmittel: UML Tool, Markdown, \u2026 5.1 Aufgabe Erstellen Sie das Domain Model und schreiben Sie die alle Use Cases im \u201eBrief\u201c-Format auf. 6 Arbeitspaket 3 \u2013 4+1 Views Hilfsmittel: UML Tool, Markdown, \u2026 6.1 Aufgabe 6.1.1 Deployment View Erstellen Sie ein Deployment Diagram mit Hilfe des Container Diagram des Big Picture. 6.1.2 Logical View Erstellen Sie ein Component Diagram und ein Class Diagram mit Hilfe des Domain Models 6.1.3 Implementation View Definieren Sie die Repository und Source-Struktur, sowie wichtige Elemente der Services und Komponenten. 7 Arbeitspaket 4 \u2013 Implementierung Hilfsmittel: VS2019, \u2026 7.1 Aufgabe Implementieren Sie das System mit Hilfe der Anforderungen und den verschiedenen Architecture Views. 8 Arbeitspaket 5 \u2013 Continuous Integration und Metriken Hilfsmittel: CI/CD (Travis, GitLab, ...), SonarQube, Code Analysis, \u2026 8.1 Aufgabe Hier soll der erstellen der jar, wars und weitere deployables automatisch nach jedem check-in gebaut und getestet werden. Zudem soll das Buildsystem weitere Metriken (code-coverage, code-qualtity, \u2026) messen und darstellen. 9 Arbeitspaket 6 \u2013 Dokumentation 9.1 Aufgabe Jedes System braucht gewisse Dokumentation. Erstellen sie eine Dokumentation mit Markdown, die sich ungef\u00e4hr an die Vorgaben des arc42 halten. 10 Bewertung Artifact Inhalt Bewertung Software Architecture Document (arc42) Big Picture & Vision SystemOverview - C4 Pattern (w/o Classes) Use Cases / Requirements Domain Models and System Sequence Diagrams Verschiedene Views (4+1) - Logical - Deployment - Implementation Qualit\u00e4tsbaum f\u00fcr NFR Teststrategie / -planung Metrikdefinition 40% Architecture / Design / Source Code GIT - Client Code - Server Code Unit- / Integration- / System-Tests 40% Build & Release Automatischer Build & Testing auf CI System Automatische Messung von Metriken mit SonarQube 20% 11 Abgabe/Termin Date: 06. September 2021 23:59:59 Git-Repo Link auf cmenzi@crip.ch und Moodle Eintrag","title":"Description"},{"location":"description/#description","text":"","title":"Description"},{"location":"description/#1-einleitung","text":"Um eine saubere Architektur in einem Projekt zu erreichen, die einerseits alle Zust\u00e4ndigkeiten kl\u00e4rt und abgrenzt und zudem eine Verteilung auf verschiedene Layers und Tiers erm\u00f6glicht, m\u00fcssen in Visual Studio mehrere Projekte angelegt werden. Wir wollen zudem die M\u00f6glichkeit haben alle internen und externen Abh\u00e4ngigkeiten zentral zu verwalten.","title":"1-Einleitung"},{"location":"description/#2-initiale-voraussetzungen","text":"VS2019 / .NET Core Nodejs NPM Postman","title":"2-Initiale Voraussetzungen"},{"location":"description/#3-einfuhrung","text":"Es soll ein neues Autovermietungssystem \u201eCarRent\u201c erstellt werden. Das System soll aus Server-Teilen und optional einen Web-Client bestehen. 1. Die Daten sollen mittels \u00abRepository Pattern\u00bb in eine Datenbank gespeichert werden k\u00f6nnen. 2. Die Business Logik soll auf dem Backend laufen und REST APIs anbieten. 3. Es soll zuerst ein Monolith erstellt werden und sp\u00e4ter auf eine Micro Service Architektur \u00fcberf\u00fchrt werden. Optional: 4. Der Web-Client benutzt die REST API um die Funktionen auszuf\u00fchren. Folgende Detailinformationen liegen unstrukturiert \u00fcber das zu entwickelnde System vor: Der Sachbearbeiter kann Kunden mit Namen und Adresse und Kundennummer im System verwalten, d.h. erfassen, bearbeiten, l\u00f6schen und den Kunden mit dessen Namen oder Kundennummer suchen. Der Sachbearbeiter kann zudem die Autos von CarRent verwalten und nach denen suchen. Jedes Auto kann einer bestimmten Klasse zwischen Luxusklasse, Mittelklasse oder Einfachklasse zugeordnet werden und besitzt zudem eine Marke, einen Typ und eine eindeutige Identifikation. Jede Klasse besitzt eine Tagesgeb\u00fchr. Bei einer neuen Reservation kann der Kunde ein Auto aus einer bestimmten Klasse w\u00e4hlen. Er muss zudem die Anzahl der Tage (Start/Enddatum) angeben, die er das Auto gerne mieten m\u00f6chte. Dabei werden die Gesamtkosten berechnet. Wird die Reservation gespeichert, so wird sie mit einer Reservationsnummer ablegt. Bei Abholung des Autos wird die Reservation in einen Mietvertrag umgewandel","title":"3-Einf\u00fchrung"},{"location":"description/#31-c4-pattern","text":"","title":"3.1 C4 Pattern"},{"location":"description/#4-arbeitspaket-1-big-picture-vision","text":"Hilfsmittel: Whiteboard, Flipchart, Postit, Word, UML Tool, Markdown, \u2026","title":"4 Arbeitspaket 1 \u2013 Big Picture / Vision"},{"location":"description/#411-context","text":"Was soll gebaut werden? Wer benutzt das System (users, actors, roles, personas, etc ? Wie passt es in die bestehende IT-Landschaft?","title":"4.1.1 Context"},{"location":"description/#412-containers","text":"Was sind die technologischen Entscheide? Wie kommunizieren die Container untereinander? Als Entwickler m\u00f6chte ich gerne wissen, wo ich Code schreiben muss?","title":"4.1.2 Containers"},{"location":"description/#413-components","text":"Aus welchen Komponenten und Services besteht das System? Ist klar wie das System \u201ehigh-level\u201c arbeiten soll? Haben alle Komponenten ein Zuhause Container?","title":"4.1.3 Components"},{"location":"description/#414-classes-optional","text":"Was sind die wichtigen Konzepte des Systems? Wie stehen die Konzepte zueinander?","title":"4.1.4 Classes (Optional)"},{"location":"description/#42-aufgabe","text":"Erstellen Sie mittels C4-Pattern das Big-Picture des Systems.","title":"4.2 Aufgabe"},{"location":"description/#5-arbeitspaket-2-domain-model-und-use-cases","text":"Hilfsmittel: UML Tool, Markdown, \u2026","title":"5 Arbeitspaket 2 \u2013 Domain Model und Use Cases"},{"location":"description/#51-aufgabe","text":"Erstellen Sie das Domain Model und schreiben Sie die alle Use Cases im \u201eBrief\u201c-Format auf.","title":"5.1 Aufgabe"},{"location":"description/#6-arbeitspaket-3-41-views","text":"Hilfsmittel: UML Tool, Markdown, \u2026","title":"6 Arbeitspaket 3 \u2013 4+1 Views"},{"location":"description/#61-aufgabe","text":"","title":"6.1 Aufgabe"},{"location":"description/#611-deployment-view","text":"Erstellen Sie ein Deployment Diagram mit Hilfe des Container Diagram des Big Picture.","title":"6.1.1 Deployment View"},{"location":"description/#612-logical-view","text":"Erstellen Sie ein Component Diagram und ein Class Diagram mit Hilfe des Domain Models","title":"6.1.2 Logical View"},{"location":"description/#613-implementation-view","text":"Definieren Sie die Repository und Source-Struktur, sowie wichtige Elemente der Services und Komponenten.","title":"6.1.3 Implementation View"},{"location":"description/#7-arbeitspaket-4-implementierung","text":"Hilfsmittel: VS2019, \u2026","title":"7 Arbeitspaket 4 \u2013 Implementierung"},{"location":"description/#71-aufgabe","text":"Implementieren Sie das System mit Hilfe der Anforderungen und den verschiedenen Architecture Views.","title":"7.1 Aufgabe"},{"location":"description/#8-arbeitspaket-5-continuous-integration-und-metriken","text":"Hilfsmittel: CI/CD (Travis, GitLab, ...), SonarQube, Code Analysis, \u2026","title":"8 Arbeitspaket 5 \u2013 Continuous Integration und Metriken"},{"location":"description/#81-aufgabe","text":"Hier soll der erstellen der jar, wars und weitere deployables automatisch nach jedem check-in gebaut und getestet werden. Zudem soll das Buildsystem weitere Metriken (code-coverage, code-qualtity, \u2026) messen und darstellen.","title":"8.1 Aufgabe"},{"location":"description/#9-arbeitspaket-6-dokumentation","text":"","title":"9 Arbeitspaket 6 \u2013 Dokumentation"},{"location":"description/#91-aufgabe","text":"Jedes System braucht gewisse Dokumentation. Erstellen sie eine Dokumentation mit Markdown, die sich ungef\u00e4hr an die Vorgaben des arc42 halten.","title":"9.1 Aufgabe"},{"location":"description/#10-bewertung","text":"Artifact Inhalt Bewertung Software Architecture Document (arc42) Big Picture & Vision SystemOverview - C4 Pattern (w/o Classes) Use Cases / Requirements Domain Models and System Sequence Diagrams Verschiedene Views (4+1) - Logical - Deployment - Implementation Qualit\u00e4tsbaum f\u00fcr NFR Teststrategie / -planung Metrikdefinition 40% Architecture / Design / Source Code GIT - Client Code - Server Code Unit- / Integration- / System-Tests 40% Build & Release Automatischer Build & Testing auf CI System Automatische Messung von Metriken mit SonarQube 20%","title":"10 Bewertung"},{"location":"description/#11-abgabetermin","text":"Date: 06. September 2021 23:59:59 Git-Repo Link auf cmenzi@crip.ch und Moodle Eintrag","title":"11 Abgabe/Termin"},{"location":"documentation/","text":"Documentation Vision Context Was soll gebaut werden? Eine Software, mit der ein Sachbearbeiter Kunden und Autos erfassen kann. Eine Software, mit der Kunden via Sachbearbeiter Autos f\u00fcr einen gew\u00fcnschnten Zeitraum reservieren und mieten k\u00f6nnen. Wer benutzt das System? Sachbearbeiter Kunden indirekt Wie passt es in die bestehende IT-Landschaft? Es gibt noch keine bestehende IT-Landschaft. Containers Was sind die technologischen Entscheide? Client Angular Server ASP.NET Core Entity Framework Testing x-Unit FakeItEasy Database Microsoft SQL CI/CD GitHub Sonar Wie kommunizieren die Container untereinander? Client / Server HTTP REST Server / Database Entity Framework (TCP/IP) Components Aus welchen Komponenten und Services besteht das System? Verwaltungen Kundenverwaltung Autoverwaltung (inkl. Autoklassen) Reservations- / Mietvertrags-Verwaltung S\u00e4mtliche Verwaltungen greifen via EF auf die DB. Ist klar wie das System \u201ehigh-level\u201c arbeiten soll? Beispiel Kunde erfassen: Der Sachbearbeiter kann im Webclient ein Kunde erfassen. Dazu muss er die entsprechenden Daten bei sich im Browser eingeben. Beim Klick auf Speichern wird ein HTTP POST Request mit den entsprechenden Daten im Payload auf die Backend ASP .NET API gemacht. Diese validiert die Daten. Falls ung\u00fcltig gibt sie ein HTTP Status 400 zur\u00fcck. Falls g\u00fcltig erstellt sie im Entity Framework ein neues Objekt und speichert es in der Datenbank. Sobald das Objekt erfolgreich gespeichert wurde gibt die API einen HTTP Status 201 zur\u00fcck. Die Webapplikation kann dann entsprechend mit einer Erfolgsmeldung darauf reagieren. Use Cases im \"Brief\" Format UC1 Der Sachbearbeiter kann Kunden verwalten (CRUD) Der Sachbearbeiter kann im Webclient Kunden: Erfassen Felder: Kundennummer Muss einzigartig sein. Vorname Name Strasse Nummer PLZ Ort Land Bearbeiten L\u00f6schen Kunden, die bereits eine Reservation, oder einen Mietvertrag besitzen k\u00f6nnen nicht gel\u00f6scht werden. Sondern diese werden nur als gel\u00f6scht markiert. Sobald ein Kunde als gel\u00f6scht markiert wurde, kann er keine neuen Reservationen mehr vornehmen. Kunden mit offenen Reservationen k\u00f6nnen nicht als gel\u00f6scht markiert werden. Suchen Kunden sollen \u00fcber folgende Felder gesucht werden k\u00f6nnen: Vorname Nachname Kundennummer UC2 Der Sachbearbeiter kann Autoklassen verwalten (CRUD) Der Sachbearbeiter kann im Webclient Autoklassen: Erfassen Felder: Name Tagesgeb\u00fchr Bearbeiten L\u00f6schen Klassen, die bereits mind. 1 Auto zugewiesen sind k\u00f6nnen nicht gel\u00f6scht werden. Suchen Klassen sollen \u00fcber folgende Felder gesucht werden k\u00f6nnen: Name UC3 Der Sachbearbeiter kann Autos verwalten (CRUD) Der Sachbearbeiter kann im Webclient Autos: Erfassen Felder: Marke Typ Autonummer Autoklasse Bearbeiten L\u00f6schen Autos, die bereits mind. einem Mietvertrag zugewiesen sind, k\u00f6nnen nicht gel\u00f6scht werden. Sondern sie werden nur als gel\u00f6scht markiert. Als gel\u00f6scht markierte Autos k\u00f6nnen nicht erneut reserviert werden. Autos mit offenen Reservationen k\u00f6nnen nicht als gel\u00f6scht markiert werden. Suchen Autos sollen \u00fcber folgende Felder gesucht werden k\u00f6nnen: Marke Autnummer UC4 Der Sachbearbeiter kann Autos f\u00fcr einen Kunde reservieren \u00dcber die Auto-Suche (UC3) kann der Sachbearbeiter ein Auto ausw\u00e4hlen. Nachdem er das Auto ausgew\u00e4hlt hat, kann er ein Start und ein Enddatum der Reservation angeben. Sobald er die Anzahl Tage ausgew\u00e4hlt hat, werden ihm die Gesamtkosten f\u00fcr die Reservation angezeigt. Beim Klick auf \"Reservieren\" wird eine neue Reservation angelegt: Felder Reservationsnummer Kunde Auto Startdatum Enddatum UC5 Der Kunde kann ein reserviertes Auto abholen Am Startdatum kommt der Kunde in die Garage und der Sachbearbeiter klickt bei der entsprechenden Reservation: Mietvertrag generieren Dieser Button wandelt die Reservation in einen Mietvertrag um. Das Reservationsmodel hat ein Flag \"Mietvertrag\". Dieses wird just in diesem Moment auf true gesetzt. Der Kunde unterzeichnet den Vertrag und kann das Auto mitnehmen. Domain Model Views Deployment View Implementation View | +---docs | | | \\---images | \\---source | +---src | \\---CarRentApi | | | +---CarManagement | | +---Api | | +---Application | | +---Domain | | \\---Infrastructure +---CustomerManagement | | +---Api | | +---Application | | +---Domain | | \\---Infrastructure +---ReservationsManagement | | +---Api | | +---Application | | +---Domain | | \\---Infrastructure \\---tests \\---CarRentApi.Tests","title":"Documentation"},{"location":"documentation/#documentation","text":"","title":"Documentation"},{"location":"documentation/#vision","text":"","title":"Vision"},{"location":"documentation/#context","text":"","title":"Context"},{"location":"documentation/#was-soll-gebaut-werden","text":"Eine Software, mit der ein Sachbearbeiter Kunden und Autos erfassen kann. Eine Software, mit der Kunden via Sachbearbeiter Autos f\u00fcr einen gew\u00fcnschnten Zeitraum reservieren und mieten k\u00f6nnen.","title":"Was soll gebaut werden?"},{"location":"documentation/#wer-benutzt-das-system","text":"Sachbearbeiter Kunden indirekt","title":"Wer benutzt das System?"},{"location":"documentation/#wie-passt-es-in-die-bestehende-it-landschaft","text":"Es gibt noch keine bestehende IT-Landschaft.","title":"Wie passt es in die bestehende IT-Landschaft?"},{"location":"documentation/#containers","text":"","title":"Containers"},{"location":"documentation/#was-sind-die-technologischen-entscheide","text":"Client Angular Server ASP.NET Core Entity Framework Testing x-Unit FakeItEasy Database Microsoft SQL CI/CD GitHub Sonar","title":"Was sind die technologischen Entscheide?"},{"location":"documentation/#wie-kommunizieren-die-container-untereinander","text":"Client / Server HTTP REST Server / Database Entity Framework (TCP/IP)","title":"Wie kommunizieren die Container untereinander?"},{"location":"documentation/#components","text":"","title":"Components"},{"location":"documentation/#aus-welchen-komponenten-und-services-besteht-das-system","text":"Verwaltungen Kundenverwaltung Autoverwaltung (inkl. Autoklassen) Reservations- / Mietvertrags-Verwaltung S\u00e4mtliche Verwaltungen greifen via EF auf die DB.","title":"Aus welchen Komponenten und Services besteht das System?"},{"location":"documentation/#ist-klar-wie-das-system-high-level-arbeiten-soll","text":"Beispiel Kunde erfassen: Der Sachbearbeiter kann im Webclient ein Kunde erfassen. Dazu muss er die entsprechenden Daten bei sich im Browser eingeben. Beim Klick auf Speichern wird ein HTTP POST Request mit den entsprechenden Daten im Payload auf die Backend ASP .NET API gemacht. Diese validiert die Daten. Falls ung\u00fcltig gibt sie ein HTTP Status 400 zur\u00fcck. Falls g\u00fcltig erstellt sie im Entity Framework ein neues Objekt und speichert es in der Datenbank. Sobald das Objekt erfolgreich gespeichert wurde gibt die API einen HTTP Status 201 zur\u00fcck. Die Webapplikation kann dann entsprechend mit einer Erfolgsmeldung darauf reagieren.","title":"Ist klar wie das System \u201ehigh-level\u201c arbeiten soll?"},{"location":"documentation/#use-cases-im-brief-format","text":"","title":"Use Cases im \"Brief\" Format"},{"location":"documentation/#uc1-der-sachbearbeiter-kann-kunden-verwalten-crud","text":"Der Sachbearbeiter kann im Webclient Kunden: Erfassen Felder: Kundennummer Muss einzigartig sein. Vorname Name Strasse Nummer PLZ Ort Land Bearbeiten L\u00f6schen Kunden, die bereits eine Reservation, oder einen Mietvertrag besitzen k\u00f6nnen nicht gel\u00f6scht werden. Sondern diese werden nur als gel\u00f6scht markiert. Sobald ein Kunde als gel\u00f6scht markiert wurde, kann er keine neuen Reservationen mehr vornehmen. Kunden mit offenen Reservationen k\u00f6nnen nicht als gel\u00f6scht markiert werden. Suchen Kunden sollen \u00fcber folgende Felder gesucht werden k\u00f6nnen: Vorname Nachname Kundennummer","title":"UC1 Der Sachbearbeiter kann Kunden verwalten (CRUD)"},{"location":"documentation/#uc2-der-sachbearbeiter-kann-autoklassen-verwalten-crud","text":"Der Sachbearbeiter kann im Webclient Autoklassen: Erfassen Felder: Name Tagesgeb\u00fchr Bearbeiten L\u00f6schen Klassen, die bereits mind. 1 Auto zugewiesen sind k\u00f6nnen nicht gel\u00f6scht werden. Suchen Klassen sollen \u00fcber folgende Felder gesucht werden k\u00f6nnen: Name","title":"UC2 Der Sachbearbeiter kann Autoklassen verwalten (CRUD)"},{"location":"documentation/#uc3-der-sachbearbeiter-kann-autos-verwalten-crud","text":"Der Sachbearbeiter kann im Webclient Autos: Erfassen Felder: Marke Typ Autonummer Autoklasse Bearbeiten L\u00f6schen Autos, die bereits mind. einem Mietvertrag zugewiesen sind, k\u00f6nnen nicht gel\u00f6scht werden. Sondern sie werden nur als gel\u00f6scht markiert. Als gel\u00f6scht markierte Autos k\u00f6nnen nicht erneut reserviert werden. Autos mit offenen Reservationen k\u00f6nnen nicht als gel\u00f6scht markiert werden. Suchen Autos sollen \u00fcber folgende Felder gesucht werden k\u00f6nnen: Marke Autnummer","title":"UC3 Der Sachbearbeiter kann Autos verwalten (CRUD)"},{"location":"documentation/#uc4-der-sachbearbeiter-kann-autos-fur-einen-kunde-reservieren","text":"\u00dcber die Auto-Suche (UC3) kann der Sachbearbeiter ein Auto ausw\u00e4hlen. Nachdem er das Auto ausgew\u00e4hlt hat, kann er ein Start und ein Enddatum der Reservation angeben. Sobald er die Anzahl Tage ausgew\u00e4hlt hat, werden ihm die Gesamtkosten f\u00fcr die Reservation angezeigt. Beim Klick auf \"Reservieren\" wird eine neue Reservation angelegt: Felder Reservationsnummer Kunde Auto Startdatum Enddatum","title":"UC4 Der Sachbearbeiter kann Autos f\u00fcr einen Kunde reservieren"},{"location":"documentation/#uc5-der-kunde-kann-ein-reserviertes-auto-abholen","text":"Am Startdatum kommt der Kunde in die Garage und der Sachbearbeiter klickt bei der entsprechenden Reservation: Mietvertrag generieren Dieser Button wandelt die Reservation in einen Mietvertrag um. Das Reservationsmodel hat ein Flag \"Mietvertrag\". Dieses wird just in diesem Moment auf true gesetzt. Der Kunde unterzeichnet den Vertrag und kann das Auto mitnehmen.","title":"UC5 Der Kunde kann ein reserviertes Auto abholen"},{"location":"documentation/#domain-model","text":"","title":"Domain Model"},{"location":"documentation/#views","text":"","title":"Views"},{"location":"documentation/#deployment-view","text":"","title":"Deployment View"},{"location":"documentation/#implementation-view","text":"| +---docs | | | \\---images | \\---source | +---src | \\---CarRentApi | | | +---CarManagement | | +---Api | | +---Application | | +---Domain | | \\---Infrastructure +---CustomerManagement | | +---Api | | +---Application | | +---Domain | | \\---Infrastructure +---ReservationsManagement | | +---Api | | +---Application | | +---Domain | | \\---Infrastructure \\---tests \\---CarRentApi.Tests","title":"Implementation View"}]}